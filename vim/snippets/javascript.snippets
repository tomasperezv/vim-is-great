# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
# Define comments for a public function
snippet cf
	/**
	 * @method ${1:function_name}
	 * @param {${2:argument_type}} ${3:argument}
	 * @return {${4:type}}
	 * @public
	 */
# Define comments for a private function
snippet cfp
	/**
	 * @method ${1:function_name}
	 * @param {${2:argument_type}} ${3:argument}
	 * @return {${4:type}}
	 * @private
	 */
# Define comments for a var
snippet cv
	/**
	 * @type {${1:type}} {${2:var_name}}
	 * @public
	 */
# Define comments for a private
snippet cvp
	/**
	 * @type {${1:type}} {${2:var_name}}
	 * @private
	 */
# Define comments for an object
snippet co
	/**
	 * @class ${1:object_name}
	 */

snippet console
	console.log(${1:value});

#############################################
# Node.js
#############################################
snippet nhead
	/*jslint node: true */
	/*global Promise*/

snippet nexport
	module.exports = ${1:Module};

snippet npromise
	var promise = new Promise(function(resolve, reject) {
	});

snippet nserver
	var http = require('http');
	http.createServer(function(req, res) {
	  var remoteAddress = req.connection.remoteAddress;
	    res.writeHead(200, {'Content-Type': 'application/json'});
	    res.write(JSON.stringify({}));
	}).listen(${1:port});

snippet nevents
	// Extend ${1:Object} to inherit EventEmitter interface
	var EventEmitter = require('events').EventEmitter;
	var util = require('util');
	util.inherits(${2:Object}, EventEmitter);

snippet nignoreLine
	// jshint ignore:line

snippet ntest
	var expect = require('expect.js');
	describe('${1:General description}', function(){
	  it('${2:Use case}', function() {
	    expect(${3:test}).to.be(null);
	  });
	});
snippet ntest-exception
	expect(function() {
	  ${1:Call that throws exception}
	}).to.throwException(function(e) {
	  expect(e).to.be.an(${2:Exception type});
	});

snippet nrequest-get
	var requestInterface = require('${1:http or https}');
	var url = '${2:URL}';
	requestInterface.request(url, function(response) {
	  var data = '';
	  response.on('data', function (chunk) {
	    data += chunk;
	  });
	
	  response.on('end', function () {
	    ${3:Process the data}
	  });
	
	}).end();

snippet nrequest-post
	var requestInterface = require('${1:http or https}');
	var querystring = require('querystring');
	
	var data = querystring.stringify({
	  '${2:parameter}' : '${3:parameter value}',
	});
	
	var options = {
	  host: '${4:host}',
	  port: '80',
	  path: '/${5:path}',
	  method: 'POST',
	  headers: {
	    'Content-Type': 'application/x-www-form-urlencoded',
	    'Content-Length': data.length
	  }
	};
	
	var req = requestInterface.request(options, function(response) {
	  response.setEncoding('utf8');
	  response.on('data', function (result) {
	    ${6:process the result}
	  });
	});
	
	req.write(data);
	req.end();

snippet nmc
	var mc = require('mc');
	var client = new mc.Client([127.0.0.1]);
	client.connect(function(err) {
	
	  client.get(key, function(err, data) {
	    // data[key]
	  });
	
	  client.set(key, value, {exptime: 3600}, function(err, data) {
	  });
	
	});
